# Programaci√≥n

## Pr√°ctico 11: Aplicaci√≥n de la Recursividad 

### Ejercicio 1

# Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
# entre 1 y el n√∫mero que indique el usuario"


# Deficinici√≥n de funciones

def factorial(num):
  if num == 0:
    return 1
  else:
    return num* factorial (num-1)       
  
 #Programa principal

num= int(input("Ingrese un n√∫mero: "))

for i in range(1,num+1):      
  print(f"El factorial de {i} es {factorial(i)}")


## Ejercicio 2

# Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario 
#especifique.   
def fibonacci(n):
    if n == 0 or n == 1:   
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

print(f"El valor de la serie de Fibonaci en la posici√≥n 7 es: {fibonacci(7)}") # Tener el cuenta que el valor posicional contempla el 0

n = int(input("Indique hasta que posici√≥n quiere consultar la seria de Finoacci: "))
for i in range(n):
    print(f"El valor de la serie de Fibonaci en la posici√≥n {i} es: {fibonacci(i)}")


### Ejercicio 3

# Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ(ùëö‚àí1) #
#Prueba esta funci√≥n en un algoritmo general.

def potencia(x,y):
    if y == 0:
        return 1
    else:
        return x * potencia(x, y - 1)

base = int(input("Ingrese el n√∫mero del cu√°l desea saber el exponente: "))  
exponente = int(input("Ingrese exponente: "))  
print(f"{base} elevado a {exponente} es: {potencia(base, exponente)}")


#### Ejercicio 4

# Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_binario(num):
   if num == 0:
      return ""
   else:
      return decimal_binario(num//2) + str(num%2)
   
num = 10
print (f"{num} en binario es {decimal_binario(num)}")


##### Ejercicio 5

# Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
# Palabra o frase cuyas letras est√°n dispuestas de tal manera que resulta la misma le√≠da de izquierda a derecha que de derecha a izquierda;

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    
    if palabra[0] != palabra[-1]:
        return False
    
    return es_palindromo(palabra[1:-1])  # CORREGIDO

print(f"¬øLa palabra 'hoyessabado' es un pal√≠ndromo? {es_palindromo('hoyessabado')}")   
print(f"¬øLa palabra 'arrozalazorra' es un pal√≠ndromo? {es_palindromo('arrozalazorra')}")


###### Ejercicio 6

# Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
# Restricciones:No se puede convertir el n√∫mero a string.//Us√° operaciones matem√°ticas (%, //) y recursi√≥n.

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return n % 10 + suma_digitos(n // 10)


numero = int(input("Ingrese un n√∫mero entero positivo: "))
print(f"La suma de los d√≠gitos de {numero} es: {suma_digitos(numero)}")

####### Ejericio 7

# Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca nbloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

n = int(input("Ingrese la cantidad de bloques en la base de su piramide: "))
print(f"La cantidad de bloques necesarios para construir su piramide son: {contar_bloques(n)}")


######## Ejercicio 8

# Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
# aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
  if numero == 0:
    return 0
  elif numero % 10 == digito:
    return 1 + contar_digito(numero // 10, digito)
  else:
    return contar_digito(numero // 10, digito)

numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese un d√≠gito entre 0 y 9: "))
print(f"El {digito} aparece {contar_digito(numero,digito)} veces.")

